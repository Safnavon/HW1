/************************************/
/* PRELIMINARY DECLARATIONS SECTION */
/************************************/

import java_cup.runtime.*;
   
/**********************/  
/* TERMINALS (TOKENS) */
/**********************/
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE; 
terminal LPAREN;
terminal RPAREN;
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal CLASS_ID;  
terminal COMMA;
terminal CONTINUE;
terminal DOT;
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal GTE;
terminal ID;
terminal IF;
terminal INT;
terminal INTEGER;
terminal LAND;
terminal LB;
terminal LP;
terminal LCBR;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MOD;
terminal MULTIPLY;
terminal NEQUAL;
terminal NULL;
terminal RB;
terminal RCBR;
terminal RETURN;
terminal RP;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal QUOTE;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;

/******************************/
/* PRECEDENCE + ASSOCIATIVITY */
/******************************/

/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal Integer	NUMBER;

/*****************************************/
/* NON TERMINALS :: IGNORE IN EXERCISE 1 */
/*****************************************/
non terminal Integer    expr, factor, term;

/*******************/
/* GRAMMAR SECTION */
/*******************/      

expr      ::=	expr:e PLUS  factor:f {: RESULT = new Integer(e.intValue() + f.intValue()); :} |
				expr:e MINUS factor:f {: RESULT = new Integer(e.intValue() - f.intValue()); :} |
				factor:f              {: RESULT = new Integer(f.intValue());                :}
				;
      
factor    ::=	factor:f TIMES term:t  {: RESULT = new Integer(f.intValue() * t.intValue()); :} |
				factor:f DIVIDE term:t {: RESULT = new Integer(f.intValue() / t.intValue()); :} |
				term:t                 {: RESULT = new Integer(t.intValue());                :} |
				error				 {: System.out.printf("errr"); :}								
				;
   
term      ::=	LPAREN expr:e RPAREN {: RESULT = e; :} |
				NUMBER:n             {: RESULT = n; :} |
				;


      				

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 22 19:51:58 IST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 22 19:51:58 IST 2016
  */
public class MatrixParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MatrixParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public MatrixParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MatrixParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\005\000\002\004\007\000\002\002\004\000\002\003" +
    "\006\000\002\002\005\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\004\005\005\001\002\000\004\002\021\001" +
    "\002\000\004\010\006\001\002\000\010\004\017\007\ufffd" +
    "\010\ufffd\001\002\000\004\010\006\001\002\000\004\010" +
    "\006\001\002\000\004\010\006\001\002\000\004\006\013" +
    "\001\002\000\004\002\001\001\002\000\004\010\006\001" +
    "\002\000\004\007\016\001\002\000\006\006\uffff\010\uffff" +
    "\001\002\000\004\010\020\001\002\000\006\007\ufffe\010" +
    "\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\004\004\003\001\001\000\002\001\001\000" +
    "\006\002\006\003\007\001\001\000\002\001\001\000\004" +
    "\002\013\001\001\000\006\002\006\003\010\001\001\000" +
    "\006\002\006\003\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MatrixParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MatrixParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MatrixParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MatrixParserCup$actions {
  private final MatrixParserCup parser;

  /** Constructor */
  CUP$MatrixParserCup$actions(MatrixParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MatrixParserCup$do_action(
    int                        CUP$MatrixParserCup$act_num,
    java_cup.runtime.lr_parser CUP$MatrixParserCup$parser,
    java.util.Stack            CUP$MatrixParserCup$stack,
    int                        CUP$MatrixParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MatrixParserCup$result;

      /* select the action based on the action number */
      switch (CUP$MatrixParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // rational ::= INTEGER 
            {
              Rational RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.peek()).value;
		 RESULT = new Rational(n,1); 
              CUP$MatrixParserCup$result = parser.getSymbolFactory().newSymbol("rational",0, ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()), RESULT);
            }
          return CUP$MatrixParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // rational ::= INTEGER DIVIDE INTEGER 
            {
              Rational RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.peek()).value;
		 RESULT = new Rational(n,m); 
              CUP$MatrixParserCup$result = parser.getSymbolFactory().newSymbol("rational",0, ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()), RESULT);
            }
          return CUP$MatrixParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // row ::= rational rational rational SEMI 
            {
              Row RESULT =null;
		int ra1left = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-3)).left;
		int ra1right = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-3)).right;
		Rational ra1 = (Rational)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-3)).value;
		int ra2left = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).left;
		int ra2right = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).right;
		Rational ra2 = (Rational)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).value;
		int ra3left = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).left;
		int ra3right = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).right;
		Rational ra3 = (Rational)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).value;
		 RESULT = new Row(ra1, ra2, ra3); 
              CUP$MatrixParserCup$result = parser.getSymbolFactory().newSymbol("row",1, ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()), RESULT);
            }
          return CUP$MatrixParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= matrix EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).right;
		Matrix start_val = (Matrix)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).value;
		RESULT = start_val;
              CUP$MatrixParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MatrixParserCup$parser.done_parsing();
          return CUP$MatrixParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // matrix ::= LB row row row RB 
            {
              Matrix RESULT =null;
		int ro1left = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-3)).left;
		int ro1right = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-3)).right;
		Row ro1 = (Row)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-3)).value;
		int ro2left = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).left;
		int ro2right = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).right;
		Row ro2 = (Row)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-2)).value;
		int ro3left = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).left;
		int ro3right = ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).right;
		Row ro3 = (Row)((java_cup.runtime.Symbol) CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-1)).value;
		 RESULT = new Matrix(ro1,ro2,ro3); 
              CUP$MatrixParserCup$result = parser.getSymbolFactory().newSymbol("matrix",2, ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.elementAt(CUP$MatrixParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$MatrixParserCup$stack.peek()), RESULT);
            }
          return CUP$MatrixParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


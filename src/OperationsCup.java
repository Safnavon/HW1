
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 29 00:25:59 IST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 29 00:25:59 IST 2016
  */
public class OperationsCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OperationsCup() {super();}

  /** Constructor which sets the default scanner. */
  public OperationsCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OperationsCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\002\010\000\002\002\010\000\002\002\005" +
    "\000\002\002\006\000\002\004\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\004\012\006\001\002\000\006\002\027\012" +
    "\006\001\002\000\006\002\uffff\012\uffff\001\002\000\006" +
    "\006\010\007\007\001\002\000\004\012\025\001\002\000" +
    "\006\011\011\012\013\001\002\000\006\010\023\012\ufff9" +
    "\001\002\000\004\012\022\001\002\000\006\004\014\005" +
    "\015\001\002\000\004\011\011\001\002\000\004\011\011" +
    "\001\002\000\004\012\017\001\002\000\006\002\ufffd\012" +
    "\ufffd\001\002\000\004\012\021\001\002\000\006\002\ufffe" +
    "\012\ufffe\001\002\000\006\002\ufffb\012\ufffb\001\002\000" +
    "\004\011\024\001\002\000\004\012\ufffa\001\002\000\006" +
    "\002\ufffc\012\ufffc\001\002\000\006\002\001\012\001\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\006\002\004\003\003\001\001\000\004\002" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\017\001\001" +
    "\000\004\004\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OperationsCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OperationsCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OperationsCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



Matrix mat;

  public OperationsCup(java_cup.runtime.Scanner s, Matrix mat) {
  	super(s);
  	this.mat = mat;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OperationsCup$actions {
  private final OperationsCup parser;

  /** Constructor */
  CUP$OperationsCup$actions(OperationsCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OperationsCup$do_action(
    int                        CUP$OperationsCup$act_num,
    java_cup.runtime.lr_parser CUP$OperationsCup$parser,
    java.util.Stack            CUP$OperationsCup$stack,
    int                        CUP$OperationsCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OperationsCup$result;

      /* select the action based on the action number */
      switch (CUP$OperationsCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rational ::= INTEGER 
            {
              Rational RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.peek()).value;
		 RESULT = new Rational(n,1); 
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("rational",2, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // rational ::= INTEGER DIVIDE INTEGER 
            {
              Rational RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.peek()).value;
		 RESULT = new Rational(n,m); 
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("rational",2, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // row_op ::= ROW_ID ASSIGN rational ROW_ID 
            {
              Matrix RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).right;
		Integer r1 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).value;
		int ratleft = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).left;
		int ratright = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).right;
		Rational rat = (Rational)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).right;
		Integer r2 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.peek()).value;
		 if(r1.equals(r2)){ parser.mat.setRow(r1, parser.mat.getRow(r2).multiplyBy(rat));}else{ throw new Error("Must assign row to itself");} 
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("row_op",0, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // row_op ::= ROW_ID SWAP ROW_ID 
            {
              Matrix RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)).right;
		Integer r1 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).right;
		Integer r2 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.peek()).value;
		 parser.mat.swapRows(r1,r2); 
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("row_op",0, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-2)), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // row_op ::= ROW_ID ASSIGN ROW_ID MINUS rational ROW_ID 
            {
              Matrix RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)).right;
		Integer r1 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).right;
		Integer r2 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).value;
		int ratleft = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).left;
		int ratright = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).right;
		Rational rat = (Rational)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).right;
		Integer r3 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.peek()).value;
		parser.mat.setRow(r1,parser.mat.getRow(r1).addRow(parser.mat.getRow(r3).multiplyBy(rat).multiplyBy(new Rational(-1,1))));  
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("row_op",0, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // row_op ::= ROW_ID ASSIGN ROW_ID PLUS rational ROW_ID 
            {
              Matrix RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)).right;
		Integer r1 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).right;
		Integer r2 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-3)).value;
		int ratleft = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).left;
		int ratright = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).right;
		Rational rat = (Rational)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()).right;
		Integer r3 = (Integer)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.peek()).value;
		parser.mat.setRow(r1,parser.mat.getRow(r1).addRow(parser.mat.getRow(r3).multiplyBy(rat)));
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("row_op",0, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-5)), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // all_operations ::= row_op 
            {
              Matrix RESULT =null;
		 
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("all_operations",1, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= all_operations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).right;
		Matrix start_val = (Matrix)((java_cup.runtime.Symbol) CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)).value;
		RESULT = start_val;
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OperationsCup$parser.done_parsing();
          return CUP$OperationsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // all_operations ::= all_operations row_op 
            {
              Matrix RESULT =null;
		  
              CUP$OperationsCup$result = parser.getSymbolFactory().newSymbol("all_operations",1, ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.elementAt(CUP$OperationsCup$top-1)), ((java_cup.runtime.Symbol)CUP$OperationsCup$stack.peek()), RESULT);
            }
          return CUP$OperationsCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


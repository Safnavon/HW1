/************************************/
/* PRELIMINARY DECLARATIONS SECTION */
/************************************/

import java_cup.runtime.*;
   
/**********************/  
/* TERMINALS (TOKENS) */
/**********************/

terminal DIVIDE;
terminal LB; 
terminal RB;
terminal SEMI; 

/******************************/
/* PRECEDENCE + ASSOCIATIVITY */
/******************************/

/**********************/
/* TERMINALS (TOKENS) */ 
/**********************/
terminal Integer	INTEGER;

/*****************************************/
/* NON TERMINALS */
/*****************************************/
non terminal Rational   	rational;
non terminal MatrixRow			row;
non terminal Matrix			matrix; 

/*******************/
/* GRAMMAR SECTION */
/*******************/  
  
matrix		::= LB row:ro1 row:ro2 row:ro3 RB  			{: RESULT = new Matrix(new MatrixRow[]{ro1,ro2,ro3}); :};

row			::= rational:ra1 rational:ra2 rational:ra3 SEMI {: RESULT = new MatrixRow(new Rational[]{ra1, ra2, ra3}); :};

rational	::= INTEGER:n DIVIDE INTEGER:m 					{: RESULT = new Rational(n,m); :} |
				INTEGER:n									{: RESULT = new Rational(n,1); :}
				;











/*
expr      ::=	expr:e PLUS  factor:f 	  {: RESULT = new Integer(e.intValue() + f.intValue()); :} |
				expr:e MINUS factor:f 	  {: RESULT = new Integer(e.intValue() - f.intValue()); :} |
				factor:f              	  {: RESULT = new Integer(f.intValue());                :}
				;
      
factor    ::=	factor:f MULTIPLY term:t  {: RESULT = new Integer(f.intValue() * t.intValue()); :} |
				factor:f DIVIDE term:t    {: RESULT = new Integer(f.intValue() / t.intValue()); :} |
				term:t                    {: RESULT = new Integer(t.intValue());                :} |
				error				      {: System.out.printf("errr"); :}								
				;
   
term      ::=	LP expr:e RP 		  	  {: RESULT = e; :} |
				INTEGER:n             	  {: RESULT = n; :} |
				;

*/
      				